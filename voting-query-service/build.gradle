buildscript {
	ext {
		springBootVersion = '1.5.19.BUILD-SNAPSHOT'
		axonVersion = '3.3.4'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
		maven { url 'http://repository.jboss.org/maven2/' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("se.transmode.gradle:gradle-docker:1.2")
	}
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker'

group = 'com.github.rluisb'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}


dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-amqp')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation("org.axonframework:axon-spring-boot-starter:${axonVersion}")
	implementation("org.axonframework:axon-amqp:${axonVersion}")
	implementation('org.modelmapper:modelmapper:1.1.0')
	implementation('io.springfox:springfox-swagger2:2.9.2')
	implementation('io.springfox:springfox-swagger-ui:2.9.2')
    runtimeOnly('org.postgresql:postgresql')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation("org.axonframework:axon-test:${axonVersion}")
	testImplementation('io.rest-assured:rest-assured:3.2.0')
	testImplementation("com.github.tomakehurst:wiremock-standalone:2.14.0")
	testImplementation('com.h2database:h2:1.3.148')
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.5'
}

docker {
	baseImage = 'store/oracle/serverjre:8'
}

distDocker {
	dryRun = true
	exposePort(8082)
	setEnvironment('JAVA_OPTS', "-Xmx1024m -Xms1024m -Djava.security.egd=file:/dev/./urandom -Duser.timezone=America/Sao_Paulo")
}

task distDockerLocal(type: Docker) {
	dryRun = false
	addFile ("${project.buildDir}/${project.libsDirName}/${rootProject.name}.jar", "/")
	exposePort(8082)
	setEnvironment('JAVA_OPTS', "-Xmx1024m -Xms1024m -Djava.security.egd=file:/dev/./urandom -Duser.timezone=America/Sao_Paulo")
	entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/'+"${rootProject.name}"+'.jar'])
}

distDocker.dependsOn(jar)
distDockerLocal.dependsOn(build)
